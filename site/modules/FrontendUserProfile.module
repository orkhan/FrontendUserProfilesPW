<?php

/**
 * FrontendUserProfile module
 *
 * This module provides to users to create their profiles on PW
 *
 * @author Orkhan Maharramli <orkhan.maharramli@gmail.com>
 * @copyright Copyright (c) 2013, Orkhan Maharramli
 * @link http://www.webber.az
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2010 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class FrontendUserProfile extends WireData implements Module {

    /**
     * Returns gender type
     *
     * @static
     * @return string
     */
    private static $gender = array(
        1 => 'Male',
        2 => 'Female'
    );

	/**
     *
	 * @return array
	 */
	public static function getModuleInfo() {

		return array(
			'title' => 'FrontendUserProfile',
			'version' => 100,
			'summary' => 'This module provides to users to create their profiles on PW',
			'href' => 'https://github.com/orkhan/FrontendUserProfilesPW',
            'permanent' => false,
			'singular' => true,
			'autoload' => true,
            'requires' => array(
                "FieldtypeSelect"
            )
		);
	}

	/**
     *
	 * Initialize the module
	 */
	public function init() {

        $this->addHookAfter('Page::getMessage', $this, 'getMessage');
        $this->addHookAfter('Page::renderLoginForm', $this, 'renderLoginForm');
        $this->addHookAfter('Page::renderLogoutForm', $this, 'renderLogoutForm');

	}

    /**
     * Renders Login form
     *
     * @return string
     */
    public function ___renderLoginForm($event) {
        if(!$this->user->isLoggedin() && $this->input->urlSegment1 != 'reset' && $this->input->urlSegment1 != 'register') {
            $login_form_html = "<form action='/profile/login/' method='post'>".
            "    <p><label>User <input type='text' name='user' /></label></p>".
            "    <p><label>Password <input type='password' name='pass' /></label></p>".
            "    <p><input type='submit' name='submit' value='Login' /></p>".
            "    <p><a href='/profile/register'>sign up</a></p>".
            "    <p><a href='/profile/reset'>reset password</a></p>".
            "</form>";

            $event->return = $login_form_html;
        }
    }

    /**
     *
     * @todo Login action
     */
    public function ___actionLogin() {
        if ($this->input->urlSegment1 == 'login') {
            if($this->input->post->user && $this->input->post->pass) {

                if($this->user->isLoggedin()) {
                    $this->session->message_content = 'You are already logged in.';
                    $this->session->message_type = 'success';
                    $this->session->redirect("/");
                }

                $user = $this->sanitizer->username($this->input->post->user);
                $pass = $this->input->post->pass;

                if($this->session->login($user, $pass)) {
                    // login successful
                    $this->session->message_content = 'You are logged in.';
                    $this->session->message_type = 'success';
                    $this->session->redirect("/");
                } else {
                    // login unsuccessful
                    $this->session->message_content = 'Password did not match that for the login provided. Please try again.';
                    $this->session->message_type = 'error';
                    $this->session->redirect("/");
                }
            }
        }
    }

    /**
     * Renders Password Reset form.
     *
     * @param mixed[] $options
     * @return string
     */
    public function ___renderPasswordResetForm($options = array()) {
        $password_reset_form_html = "
            <h2>Reset your password</h2>
            <form action='/profile/reset/' method='post'>
                <label>E-Mail <input type='email' name='email'></label>
                <input type='submit'>
            </form>
        ";

        return $password_reset_form_html;
    }

    /**
     *
     * @todo Password Reset action
     */
    public function ___actionReset() {
        if ($this->input->urlSegment1 == 'reset') {
            if(!$this->user->isLoggedin()) {
                $email = $this->sanitizer->email($this->input->post->email);
                if($email) {
                    $u = $this->users->get("email=$email");
                    if($u->id) {
                        // generate a random, temporary password
                        $pass = '';
                        $chars = 'abcdefghjkmnopqrstuvwxyz23456789'; // add more as you see fit
                        $length = mt_rand(9,12); // password between 9 and 12 characters
                        for($n = 0; $n < $length; $n++) $pass .= $chars[mt_rand(0, strlen($chars)-1)];
                        $u->of(false);
                        $u->tmp_pass = $pass; // populate a temporary pass to their profile
                        $u->save();
                        $u->of(true);
                        $message = "Your temporary password on our web site is: $pass\n";
                        $message .= "Please change it after you login.";
                        mail($u->email, "Password reset", $message, "From: noreply@{$this->config->httpHost}");
                        $this->session->message_content = 'An email has been dispatched to you with further instructions.';
                        $this->session->message_type = 'success';
                        $this->session->redirect('/');
                    } else {
                        $this->session->message_content = "Sorry, account doesn't exist or doesn't have an email.";
                        $this->session->message_type = 'error';
                        $this->session->redirect('/profile/reset');
                    }
                } else {
                    echo $this->___renderPasswordResetForm();
                }
            } else {
                $this->session->message_content = 'You are already logged in. To reset password you must logout.';
                $this->session->message_type = 'error';
                $this->session->redirect('/');
            }
        }
    }

    /**
     * Renders Logout form.
     *
     * @return string
     */
    public function ___renderLogoutForm($event) {
        if($this->user->isLoggedin())
            $event->return = '<a href="/profile/logout/">Logout</a>';
    }

    /**
     *
     * @todo Logout action
     */
    public function ___actionLogout() {
        if ($this->input->urlSegment1 == 'logout') {
            if($this->user->isLoggedin()) $this->session->logout();
            $this->session->message_content = 'You logged out.';
            $this->session->message_type = 'success';
            $this->session->redirect('/');
        }
    }


    /**
     * Renders Registration form.
     *
     * @param mixed[] $options
     * @return string
     */
    public function ___renderRegistrationForm($options = array()) {
        if(!$this->user->isLoggedin() && $this->input->urlSegment1 == 'register') {
            $register_form_html = "
            <script type='text/javascript'>
            $(document).ready(function(){
                $('input#email').change(function(){
                    if (IsEmail($(this).val())) {
                        var email = $(this).val();

                        $.ajax({
                          type: 'POST',
                          url: '/profile/ajax/',
                          data: ({email : email}),
                          success: function(data){
                            alert(data);
                          }
                        });

                    }
                });
                $('input#name').change(function(){
                    if (IsName($(this).val())) {
                        var name = $(this).val();

                        $.ajax({
                          type: 'POST',
                          url: '/profile/ajax/',
                          data: ({name : name}),
                          success: function(data){
                            alert(data);
                          }
                        });

                    }
                });
            });
            function IsEmail(email) {
                var regex = /^([a-zA-Z0-9_\.\-\+])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
                return regex.test(email);
            }
            function IsName(email) {
                var regex = /^[a-z0-9_.]+$/g;
                return regex.test(email);
            }
            </script>";
            $register_form_html .= "<form action='/profile/register/' method='post'>".
                "    <p><label>Username* <input type='text' id='name' name='name' /></label></p>".
                "    <p><label>Email* <input type='text' id='email' name='email' /></label></p>".
                "    <p><label>Password* <input type='password' name='pass' /></label></p>".
                "    <p><label>Repeat Password* <input type='password' name='pass2' /></label></p>".
                "    <p><label>Fullname <input type='text' name='fullname' /></label></p>".
                "    <p><label>Birthdate <input type='text' name='birthdate' placeholder='YYYY-mm-dd' /></label></p>".
                "    <p><label>Gender <select name=\"gender\">
							<option selected=\"selected\" value=\"\"></option>
							<option value=\"1\">Male</option>
							<option value=\"2\">Female</option>
						</select></label></p>".
                "    <p><input type='submit' name='submit' value='register' /></p>".
                "</form>";

            return $register_form_html;
        }
    }

    /**
     *
     * @todo Register action
     */
    public function ___actionRegister() {
        if (!$this->user->isLoggedin() && $this->input->urlSegment1 == 'register') {
            if ($this->sanitizer->name($this->input->post->submit)) {
                $name = $this->sanitizer->name($this->input->post->name);
                $email = $this->sanitizer->email($this->input->post->email);
                $pass = $this->sanitizer->text($this->input->post->pass);
                $pass2 = $this->sanitizer->text($this->input->post->pass2);
                $fullname = $this->sanitizer->text($this->input->post->fullname);
                $birthdate = $this->sanitizer->text($this->input->post->birthdate);
                $gender = $this->sanitizer->text($this->input->post->gender);

                if ($pass != $pass2) {
                    $this->session->message_content = 'Passwords is not match.';
                    $this->session->message_type = 'error';
                    $this->session->redirect($this->page->path.'register/');
                }

                if ($name && $email && $pass) {
                    $u = new User();
                    $u->name = $name;
                    $u->pass = $pass;
                    $u->email = $email;
                    $u->fullname = $fullname;
                    $u->birthdate = $birthdate . " 00:00:00";
                    $u->gender = $gender;
                    $u->addRole("guest");
                    $u->addRole("registered");
                    $u->save();

                    if ($this->session) {
                        $this->session->logout();
                    }

                    $this->session->login($name, $pass);

                    $this->session->message_content = 'Successfully registered and logged in.';
                    $this->session->message_type = 'success';
                    $this->session->redirect($this->page->path.'register/');
                } else {
                    $this->session->message_content = 'Username or Mail is not entered.';
                    $this->session->message_type = 'error';
                    $this->session->redirect($this->page->path.'register/');
                }
            }
        }
    }

    /**
     * Renders Profile Edit form.
     *
     * @param mixed[] $options
     * @return string
     */
    public function ___renderProfileEditForm($options = array()) {
        if($this->user->isLoggedin() && $this->input->urlSegment1 == 'edit' && $this->user->hasPermission('profile-edit')) {

            $profile_edit_form_html = "
            <script type='text/javascript'>
            $(document).ready(function(){
                $('select#gender').val(".$this->user->gender.");
                $('input#email').change(function(){
                    if (IsEmail($(this).val())) {
                        var email = $(this).val();

                        $.ajax({
                          type: 'POST',
                          url: '/profile/ajax/',
                          data: ({email : email}),
                          success: function(data){
                            alert(data);
                          }
                        });

                    }
                });
            });
            function IsEmail(email) {
                var regex = /^([a-zA-Z0-9_\.\-\+])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
                return regex.test(email);
            }
            </script>";
            $profile_edit_form_html .= "<form action='/profile/edit/' method='post' enctype='multipart/form-data'>".
                "    <p><label><b>Username:</b> ".$this->user->name."</label></p>".
                "    <p><label><b>Email:</b> <input type='text' id='email' name='email' value='".$this->user->email."' /></label></p>".
                "    <p><label><b>Fullname</b> <input type='text' name='fullname' value='".$this->user->fullname."' /></label></p>".
                "    <p><label><b>Birthdate</b> <input type='text' name='birthdate' placeholder='YYYY-mm-dd' value='".date('Y-m-d',$this->user->birthdate)."' /></label></p>".
                "    <p><label><b>Gender</b> <select id='gender' name=\"gender\">
							<option value=\"\"></option>
							<option value=\"1\">Male</option>
							<option value=\"2\">Female</option>
						</select></label></p>".
                "<b>Avatar:</b> <input name=\"avatar\" type=\"file\" />".
                "    <p>&nbsp;</p><p><label>change password?</b> <input type='checkbox' name='change_password' value='yes' /></label></p>".
                "    <p><label><b>Password*</b> <input type='password' name='pass' /></label></p>".
                "    <p><label><b>Repeat Password*</b> <input type='password' name='pass2' /></label></p>".
                "    <p><input type='submit' name='submit' value='edit' /></p>".
                "</form>";

            return $profile_edit_form_html;
        }
    }

    /**
     *
     * @todo Profile Edit action
     */
    public function ___actionProfileEdit($options = array()) {
        if( $this->user->isLoggedin() &&
            $this->input->urlSegment1 == 'edit' &&
            $this->user->hasPermission('profile-edit') &&
            $this->sanitizer->name($this->input->post->submit)
        ) {
            $name = $this->user->name;
            $email = $this->sanitizer->email($this->input->post->email);

            $change_password = $this->sanitizer->name($this->input->post->change_password);
            $pass = $this->sanitizer->text($this->input->post->pass);
            $pass2 = $this->sanitizer->text($this->input->post->pass2);

            $fullname = $this->sanitizer->text($this->input->post->fullname);
            $birthdate = $this->sanitizer->text($this->input->post->birthdate);
            $gender = $this->sanitizer->text($this->input->post->gender);

            $this->user->email = $email;
            $this->user->fullname = $fullname;
            $this->user->birthdate = $birthdate . " 00:00:00";
            $this->user->gender = $gender;

            $u = new WireUpload('avatar');
            $u->setMaxFiles(1);
            $u->setOverwrite(true);
            $u->setDestinationPath($this->user->avatar->path());
            $u->setValidExtensions(array('jpg', 'jpeg', 'gif', 'png'));

            foreach($u->execute() as $filename) {
                $this->user->avatar->removeAll();
                $this->user->avatar->add($filename);
            }

            if ($change_password) {
                if ($pass == $pass2) {
                    $this->user->pass = $pass;
                    $this->user->save();

                    if ($this->session) {
                        $this->session->logout();
                    }

                    $this->session->login($name, $pass);
                } else {
                    $this->session->message_content = 'Passwords is not match.';
                    $this->session->message_type = 'error';
                    $this->session->redirect($this->page->path.'edit/');
                }
            } else {
                $this->user->save();
            }

            $this->session->message_content = 'Your profile edited.';
            $this->session->message_type = 'success';
            $this->session->redirect($this->page->path);
        }
    }

    /**
     * Renders Profile
     *
     * @param mixed[] $options
     * @return string
     */
    public function ___renderProfile($options = array()) {
        if($this->user->isLoggedin() && !$this->input->urlSegment1) {
            $avatar = "/site/templates/styles/images/no-avatar.jpg";
            if ($this->user->avatar) {
                $cropped_avatar = $this->user->avatar->first()->size(150);
                $avatar = $cropped_avatar->url;
            }
            $profile_html = "
            <h3>".$this->user->name."</h3>
            <div style='float:left;width:200px;'>
                <p><img src='".$avatar."' /></p>
            </div>
            <div style='float:left;width:400px;'>
                <p>Email: ".$this->user->email."</p>
                <p>Fullname: ".$this->user->fullname."</p>
                <p>Birthdate: ".date('Y-m-d',$this->user->birthdate)."</p>
                <p>Gender: ".self::$gender[$this->user->gender]."</p>
                <p>&nbsp;</p>
            ";

            if ($this->user->hasPermission('profile-edit')) {
                $profile_html .= "
                <p><a href='/profile/edit/'>edit profile</a></p>
                ";
            }

            $profile_html .= "
            </div>
            ";

            return $profile_html;
        }

        if($this->user->isLoggedin() && $this->input->urlSegment1 == 'info' && $this->sanitizer->name($this->input->urlSegment2)) {

            $name = $this->sanitizer->name($this->input->urlSegment2);
            $u = $this->users->get("name=$name");

            $avatar = "/site/templates/styles/images/no-avatar.jpg";
            if ($u->avatar) {
                $cropped_avatar = $u->avatar->first()->size(150);
                $avatar = $cropped_avatar->url;
            }
            $profile_html = "
            <h3>".$u->name."</h3>
            <div style='float:left;width:200px;'>
                <p><img src='".$avatar."' /></p>
            </div>
            <div style='float:left;width:400px;'>
                <p>Email: ".$u->email."</p>
                <p>Fullname: ".$u->fullname."</p>
                <p>Birthdate: ".date('Y-m-d',$u->birthdate)."</p>
                <p>Gender: ".self::$gender[$u->gender]."</p>
                <p>&nbsp;</p>
            </div>
            ";

            return $profile_html;
        }
    }

    /**
     * Renders System Messages
     *
     * @return string
     */
    public function ___getMessage($event) {
        $type = ($this->session->message_type == 'success') ? 'green' : 'red';
        if ($this->session->message_content) {
            $event->return = array(
                'content' => $this->session->message_content,
                'type' => $type
            );
            $this->session->remove('message_content');
        }

        if ($this->session->message_type) {
            $this->session->remove('message_type');
        }
    }

    /**
     * Provides AJAX actions
     *
     * @return bool
     */
    public function ___actionAjax() {
        if ($this->input->urlSegment1 == 'ajax') {
            if ($this->input->post->email) {
                $email = $this->sanitizer->email($this->input->post->email);
                if($this->users->get("email=$email")->name) {
                    echo 1;
                } else {
                    echo 0;
                }
            }
            if ($this->input->post->name) {
                $name = $this->sanitizer->name($this->input->post->name);
                if($this->users->get("name=$name")->name) {
                    echo 1;
                } else {
                    echo 0;
                }
            }
        }
    }

    /**
     *
     * @todo Module install action
     */
    public function ___install() {

        // Check that there are no required templates & fields already...
        $this->_checkInstall();

        $field_fullname = new Field();
        $field_fullname->type = $this->modules->get("FieldtypeText");
        $field_fullname->name = 'fullname';
        $field_fullname->label = 'Fullname';
        $field_fullname->collapsed = 0;
        $field_fullname->textformatters = array("TextformatterEntities");
        $field_fullname->size = 0;
        $field_fullname->maxlength = 1024;
        $field_fullname->save();

        $field_avatar = new Field();
        $field_avatar->type = $this->modules->get("FieldtypeImage");
        $field_avatar->name = 'avatar';
        $field_avatar->label = 'User avatar';
        $field_avatar->extensions = "gif jpg jpeg png";
        $field_avatar->entityEncode = 1;
        $field_avatar->adminThumbs = 1;
        $field_avatar->inputfieldClass = "InputfieldImage";
        $field_avatar->maxFiles = 1;
        $field_avatar->descriptionRows = 1;
        $field_avatar->save();

        $field_birthdate = new Field();
        $field_birthdate->type = $this->modules->get("FieldtypeDatetime");
        $field_birthdate->name = 'birthdate';
        $field_birthdate->label = 'User birthdate';
        $field_birthdate->size = 25;
        $field_birthdate->datepicker = 3;
        $field_birthdate->_dateInputFormat = "Y-m-d";
        $field_birthdate->dateInputFormat = "Y-m-d";
        $field_birthdate->yearRange = 1950;
        $field_birthdate->save();

        $field_gender = new Field();
        $field_gender->type = $this->modules->get("FieldtypeSelect");
        $field_gender->name = 'gender';
        $field_gender->label = 'User gender';
        $field_gender->select_options = "1:=Male\r\n2:=Female";
        $field_gender->collapsed = 0;
        $field_gender->save();

        $fieldgroups = wire('fieldgroups');
        $user_field_group = $fieldgroups->get('user');

        $user_field_group->add($field_fullname);
        $user_field_group->add($field_avatar);
        $user_field_group->add($field_birthdate);
        $user_field_group->add($field_gender);
        $user_field_group->save();

        $basic_page_field_group = $fieldgroups->get('basic-page');

        $template_profile = new Template();
        $template_profile->name = 'fuserprofile';
        $template_profile->fieldgroup = $basic_page_field_group;
        $template_profile->slashUrls = 1;
        $template_profile->urlSegments = 1;
        $template_profile->pageLabelField = 'title';
        $template_profile->save();

        $profile_edit = wire('pages')->get('name=profile-edit');
        $new_role = new Role();
        $new_role->name = 'registered';
        $new_role->addPermission($profile_edit->id);
        $new_role->save();

        $profile_page = new Page();
        $profile_page->template = $template_profile;
        $profile_page->parent = 1;
        $profile_page->title = 'Profile';
        $profile_page->name = 'profile';
        $profile_page->process = $this;
        $profile_page->save();

    }

    /**
     *
     * @todo Module uninstall action
     */
    public function ___uninstall() {

        $role_page = $this->pages->get('name=registered');
        if ($role_page->id) $this->pages->delete($role_page);

        $profile_page = $this->pages->get('template=fuserprofile, name=profile, include=all');
        if ($profile_page->id) $this->pages->delete($profile_page, true); // Recursive delete

        $templates = wire('templates');
        $templates->delete($templates->get('fuserprofile'));

        $fields = wire('fields');
        $fieldgroups = wire('fieldgroups');

        $user_fieldgroup = $fieldgroups->get("user");
        $user_fieldgroup->remove('fullname');
        $user_fieldgroup->remove('avatar');
        $user_fieldgroup->remove('birthdate');
        $user_fieldgroup->remove('gender');
        $user_fieldgroup->save();

        $fields->delete($fields->get('fullname'));
        $fields->delete($fields->get('avatar'));
        $fields->delete($fields->get('birthdate'));
        $fields->delete($fields->get('gender'));

    }

    /**
     * Returns true if module already installed
     *
     * @return bool
     */
    private function _checkInstall() {

        if($this->templates->get('fuserprofile'))
            throw new WireException("There is already a template installed called 'fuserprofile'");

        if($this->fields->get('fullname'))
            throw new WireException("There is already a field installed called 'fullname'");

        if($this->fields->get('avatar'))
            throw new WireException("There is already a field installed called 'avatar'");

        if($this->fields->get('birthdate'))
            throw new WireException("There is already a field installed called 'birthdate'");

        return true;
    }
	
}
